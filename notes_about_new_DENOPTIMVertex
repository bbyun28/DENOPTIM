* construct vertex in type-agnostic way: we need a general constructor that can take 
molID and fragType (or we get rid of those identifiers)

* compare vertexes

* get 3D molecular representation of vertex, if any, or skip if none is available. 

* should not allow setVertexId

* MolId and fragment-type are used to point to a specific fragment in the library without pointing to a specific vertex (so, cannot use vertex ID). This happens in:
** PathSubGraph (need to collect all possible chain IDs in allPossibleChainIDs, and the chain ID needs to be independent from the actual vertex ID, while it should point to a specific fragment in the library.)
** DENOPTIMGraphEdit has a similar need: point to an undefined vertex that contains a specific fragment from the fragment space.
** GraphUtils.findVertices too has the need to detect vertexes that CAN be fragments and CAN have a specific molID+fragTyp pair
** FragsCombinationIterator
** see IdFragmentAndAP 
** also utils like EAUtils.selectClassBasedFragment are heavily driven by the ID-based referencing to vertexes in the fragment library and to their APs
